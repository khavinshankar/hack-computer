/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
 class String {

    field Array string;
    field int length, _maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        if(maxLength > 0) {
            let string = Array.new(maxLength);
        }
        let _maxLength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(~(string = 0)){
            do string.dispose();
        }
        
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let string[length] = c;
        let length = length + 1;
        
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let string[length] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, i, sign;
        let value = 0;
        let sign = 1;
        let i = 0;
        while(i < length) {
            if(i = 0) {
                if(string[i] = 45) {
                    let sign = -1;
                } else {
                    if((string[i] > 47) & (string[i] < 58)) {
                        let value = (value * 10) + (string[i] - 48);
                    } else {
                        return  sign * value;
                    }
                }
            } else{
                if((string[i] > 47) & (string[i] < 58)) {
                    let value = (value * 10) + (string[i] - 48);
                } else {
                    return  sign * value;
                }
            }

            let i = i + 1;
        }

        return sign * value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        if (val < 0) {
			if (_maxLength > 0) {
				// minus sign
				let string[0] = 45;
			}

			let val = -1 * val;
			let length = 1;
		} else {	
			let length = 0;
		}
		
		do int2String(val);
		return; 
    }

    method void int2String(int val) {
		var int lastDigit;
		var int ch;	

		// lastDigit = val % 10;
		let lastDigit = Math.mod(val, 10);
		
		// ch = digit + '0';
		let ch = lastDigit + 48;

		if (~(val < 10)) {
			do int2String(val / 10);
        }

		if (_maxLength > length) {
			let string[length] = ch;
			let length = length + 1;
		}

		return;
	}

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}