/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
 class Math {

    static Array ref;

    /** Initializes the library. */
    function void init() {
        var int i;
        let i = 1;
        let ref = Array.new(16);
        let ref[0] = 1;
        while(i < 16) {
            let ref[i] = ref[i-1] + ref[i-1]; // ref[i] = ref[i-1] * 2
            let i = i + 1;
        }

        return;
    }

    function boolean bit(int number, int index){
        if((number & ref[index]) = 0){
            return false;
        } else {
            return true;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x > 0) {
            return x;
        } else {
            return -x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, sum, shiftedX;
        let i = 0;
        let sum = 0; 
        let shiftedX = x;

        while(i < 16) {
            if(Math.bit(y, i) = true) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;

        // numerator 0
        if(x = 0) {
            return 0;
        }

        // handling negatives
        if(y < 0) {
            if(x < 0) {
                return Math.divide(Math.abs(x), Math.abs(y));
            } else {
                return -Math.divide(x, Math.abs(y));
            } 
        } else {
            if(x < 0) {
                return -Math.divide(Math.abs(x), y);
            }
        }

        // denominator > numerator
        if(y > x) {
            return 0;
        }

        // handling overflow
        if((2 * y) < 0) {
            return 0;
        }

        let q = Math.divide(x, (2 * y));
        if((x - (2 * q * y)) < y) {
            return 2 * q;
        } else {
            return (2 * q) + 1;
        }
    }

    /** Returns the modulus. */
    function int mod(int x, int y) {
        return x - ((x / y) * y);
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int beg, end, mid, val;

        if(x = 0) {
            return 0;
        }

        let beg = 0;
        let end = x;
        while(beg < end) {

            // for corner case, for numbers with no exact sqaure root, eg: 5, 8, 10, ...
            if(beg = (end-1)) {
                return beg;
            }

            let mid = (beg + end) / 2;
            let val = mid * mid;

            if(val = x) {
                return mid;
            } else {
                // (val < 0) handling overflow
                if((val > x) | (val < 0)) {
                    let end = mid;
                } else {
                    let beg = mid;
                }
            }
        }

        return mid;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    /** Gives the value when ith bit is 1 and rest is 0 */
    function int twoPower(int bit) {
        return ref[bit];
    }
}
