/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=ALUM, sel=instruction[15], out=toAReg); //if op==0 instruction else outM
    
    Not(in=instruction[15], out=notOP); //!op
    Or(a=instruction[5], b=notOP, out=ALoad); //op==0 or d1==1
    ARegister(in=toAReg, load=ALoad, out=A, out[0..14]=addressM);
    
    And(a=instruction[15], b=instruction[4], out=DLoad); //op==1 and d2==1
    DRegister(in=ALUM, load=DLoad, out=toALU1);

    And(a=instruction[15], b=instruction[12], out=selAorM); //op==1 and a==1
    Mux16(a=A, b=inM, sel=selAorM, out=toALU2); //if op==1 and a==1 A else inM

    ALU(x=toALU1, y=toALU2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUM, out=outM, zr=zr, ng=ng);
    //zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6

    And(a=instruction[15], b=instruction[3], out=writeM); //op==1 and d3==1

    
    Not(in=ng, out=notNg); //positive
    Not(in=zr, out=notZr); //non-zero

    And(a=notZr, b=notNg, out=grt); //non-zero and positive
    And(a=instruction[15], b=instruction[0], out=jgt); //op==1 and j3==1
    And(a=grt, b=jgt, out=load1);

    And(a=instruction[15], b=instruction[1], out=jeq); //op==1 and j2==1
    And(a=zr, b=jeq, out=load2);

    And(a=instruction[15], b=instruction[2], out=jlt); //op==1 and j1==1
    And(a=ng, b=jlt, out=load3); //negative

    Or(a=load1, b=load2, out=tload);
    Or(a=tload, b=load3, out=load);

    PC(in=A, load=load, inc=true, reset=reset, out[0..14]=pc);
}